/*configurações*/
$ git config --list // lista configurações do git na maquina

/*níveis de configuração do git*/
$ git config --system // configuração do git na maquina toda
$ git config --global // configurações do usuario para qualquer projeto
$ git config --local // configurações do git em um projeto específico

/*alteração das configurações do git*/
$ git config --global --edit // abre com o editor padrão de linha de comando
ou
$ git config --global core.editor code --wait // abre com o editor escolhido

/// ~/.gitconfig ///
[user]
	email = moacircostajr@gmail.com
	name = Moacir Costa
[core]
	editor = code --wait
[alias]
	s = !git status -s
	c = !git add --all && git commit -m
	l = !git log --pretty=format:'%C(blue)%h%C(red)%d %C(white)%s - %C(cyan)%cn, %C(green)%cr'

'%cn' = nome da pessoa que fez o commit
'%cr' = data relativa do commit
'%H' = hash do commit
'%h' = hash reduzida do commit
'%d' = branch
'%s' = mensagem do commit
%C(blue) = tudo que vier depois fica na cor indicada

/*commit padrão*/
// tudo minúsculo, exceto nome de classes
// sem pontuação
// verbos no presente
(https://www.conventionalcommits.org/en/v1.0.0/)
TYPES:
fix = correção de erro
feat = feature nova
build
chore = configuração do projeto
ci
docs = mudança na documentação
style
refactor = refatoração do codigo
perf
test = teste unitário

<type>[optional scope]: <description>

[optional body]

[optional footer(s)]

$ git add .
$ git commit --amend --no-edit // adiciona as alterações ao commit anterior usando a descrição do commit anterior

// NODEJS (versões em https://node.green/)
/*criação do projeto*/
$ git init
$ npm init -y
$ npm install -D git-commit-msg-linter
$ npm install -D typescript @types/node

$ npm install --save-dev eslint@7 eslint-plugin-standard@4 eslint-plugin-promise@4 eslint-plugin-import@2 eslint-plugin-node@11 @typescript-eslint/eslint-plugin@4 eslint-config-standard-with-typescript
(https://github.com/standard/eslint-config-standard-with-typescript)

/// .eslintrc ///
{
  "extends": "standard-with-typescript", // estende as configurações padrão do eslint pro typescript
  "parserOptions": {
    "project": "./tsconfig.json" // informa ao eslint que serão usadas as configurações do typescript no projeto
  },
  "rules": {
    "@typescript-eslint/space-before-function-paren": "off"
  }
}

$ npm install -D husky // permite a execução de comandos antes de fazer um commit
$ npm install -D lint-staged // atua em conjunto com o husky. permite a execução de scripts somente nos arquivos que estão na stage area (arquivos que irão para o próximo commit)

/// .huskyrc.json ///
{
  "hooks": {
    "pre-commit": "lint-staged" // faz a verificação dos padrões do projeto em todos os arquivos que serão comitados
  }
}
/// .lintstagedrc.json ///
{
  "*.ts": [
    "eslint 'src/**' --fix", // faz a checagem de padrões em todos os arquivos do tipo ts na pasta src. caso encontre erros, tenta corrigir
    "npm run test:staged", // executa o script de teste escript no package.json
    "git add" // caso não encontre erros, adiciona os arquivos para serem commitados
  ]
}

$ npm install -D jest @types/jest ts-jest
$ jest --init

/// src/controller.spec.ts /// (teste do jest)
describe('', () => {
  test('', () => {
    expect(1).toBe(1)
  })
})
